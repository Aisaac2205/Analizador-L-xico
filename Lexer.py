# Generated from src/Lexer.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,6,121,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,1,
        0,1,0,5,0,16,8,0,10,0,12,0,19,9,0,1,0,1,0,5,0,23,8,0,10,0,12,0,26,
        9,0,1,0,1,0,5,0,30,8,0,10,0,12,0,33,9,0,1,0,1,0,5,0,37,8,0,10,0,
        12,0,40,9,0,1,0,1,0,5,0,44,8,0,10,0,12,0,47,9,0,1,0,1,0,5,0,51,8,
        0,10,0,12,0,54,9,0,1,0,1,0,5,0,58,8,0,10,0,12,0,61,9,0,1,0,1,0,5,
        0,65,8,0,10,0,12,0,68,9,0,1,1,1,1,1,1,1,1,1,2,3,2,75,8,2,1,2,4,2,
        78,8,2,11,2,12,2,79,1,2,1,2,4,2,84,8,2,11,2,12,2,85,3,2,88,8,2,1,
        3,4,3,91,8,3,11,3,12,3,92,1,3,1,3,4,3,97,8,3,11,3,12,3,98,5,3,101,
        8,3,10,3,12,3,104,9,3,1,4,4,4,107,8,4,11,4,12,4,108,1,4,1,4,1,4,
        1,4,1,5,4,5,116,8,5,11,5,12,5,117,1,5,1,5,0,0,6,1,1,3,2,5,3,7,4,
        9,5,11,6,1,0,9,1,0,65,90,6,0,33,33,35,36,38,38,48,57,64,90,97,122,
        1,0,97,122,1,0,48,57,4,0,33,33,35,36,38,38,64,64,4,0,45,45,48,57,
        95,95,97,122,14,0,65,90,97,122,193,193,201,201,205,205,209,209,211,
        211,218,218,225,225,233,233,237,237,241,241,243,243,250,250,2,0,
        44,44,46,46,3,0,9,10,13,13,32,32,137,0,1,1,0,0,0,0,3,1,0,0,0,0,5,
        1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,1,13,1,0,0,0,3,69,1,
        0,0,0,5,74,1,0,0,0,7,90,1,0,0,0,9,106,1,0,0,0,11,115,1,0,0,0,13,
        17,7,0,0,0,14,16,7,1,0,0,15,14,1,0,0,0,16,19,1,0,0,0,17,15,1,0,0,
        0,17,18,1,0,0,0,18,20,1,0,0,0,19,17,1,0,0,0,20,24,7,0,0,0,21,23,
        7,1,0,0,22,21,1,0,0,0,23,26,1,0,0,0,24,22,1,0,0,0,24,25,1,0,0,0,
        25,27,1,0,0,0,26,24,1,0,0,0,27,31,7,2,0,0,28,30,7,1,0,0,29,28,1,
        0,0,0,30,33,1,0,0,0,31,29,1,0,0,0,31,32,1,0,0,0,32,34,1,0,0,0,33,
        31,1,0,0,0,34,38,7,2,0,0,35,37,7,1,0,0,36,35,1,0,0,0,37,40,1,0,0,
        0,38,36,1,0,0,0,38,39,1,0,0,0,39,41,1,0,0,0,40,38,1,0,0,0,41,45,
        7,2,0,0,42,44,7,1,0,0,43,42,1,0,0,0,44,47,1,0,0,0,45,43,1,0,0,0,
        45,46,1,0,0,0,46,48,1,0,0,0,47,45,1,0,0,0,48,52,7,3,0,0,49,51,7,
        1,0,0,50,49,1,0,0,0,51,54,1,0,0,0,52,50,1,0,0,0,52,53,1,0,0,0,53,
        55,1,0,0,0,54,52,1,0,0,0,55,59,7,3,0,0,56,58,7,1,0,0,57,56,1,0,0,
        0,58,61,1,0,0,0,59,57,1,0,0,0,59,60,1,0,0,0,60,62,1,0,0,0,61,59,
        1,0,0,0,62,66,7,4,0,0,63,65,7,1,0,0,64,63,1,0,0,0,65,68,1,0,0,0,
        66,64,1,0,0,0,66,67,1,0,0,0,67,2,1,0,0,0,68,66,1,0,0,0,69,70,7,5,
        0,0,70,71,7,5,0,0,71,72,6,1,0,0,72,4,1,0,0,0,73,75,5,45,0,0,74,73,
        1,0,0,0,74,75,1,0,0,0,75,77,1,0,0,0,76,78,7,3,0,0,77,76,1,0,0,0,
        78,79,1,0,0,0,79,77,1,0,0,0,79,80,1,0,0,0,80,87,1,0,0,0,81,83,5,
        46,0,0,82,84,7,3,0,0,83,82,1,0,0,0,84,85,1,0,0,0,85,83,1,0,0,0,85,
        86,1,0,0,0,86,88,1,0,0,0,87,81,1,0,0,0,87,88,1,0,0,0,88,6,1,0,0,
        0,89,91,7,6,0,0,90,89,1,0,0,0,91,92,1,0,0,0,92,90,1,0,0,0,92,93,
        1,0,0,0,93,102,1,0,0,0,94,96,5,32,0,0,95,97,7,6,0,0,96,95,1,0,0,
        0,97,98,1,0,0,0,98,96,1,0,0,0,98,99,1,0,0,0,99,101,1,0,0,0,100,94,
        1,0,0,0,101,104,1,0,0,0,102,100,1,0,0,0,102,103,1,0,0,0,103,8,1,
        0,0,0,104,102,1,0,0,0,105,107,7,3,0,0,106,105,1,0,0,0,107,108,1,
        0,0,0,108,106,1,0,0,0,108,109,1,0,0,0,109,110,1,0,0,0,110,111,7,
        7,0,0,111,112,5,48,0,0,112,113,5,48,0,0,113,10,1,0,0,0,114,116,7,
        8,0,0,115,114,1,0,0,0,116,117,1,0,0,0,117,115,1,0,0,0,117,118,1,
        0,0,0,118,119,1,0,0,0,119,120,6,5,1,0,120,12,1,0,0,0,18,0,17,24,
        31,38,45,52,59,66,74,79,85,87,92,98,102,108,117,2,1,1,0,6,0,0
    ]

class Lexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    PASSWORD = 1
    USERNAME = 2
    DECIMAL = 3
    LETTERS = 4
    MONEY = 5
    WS = 6

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
 ]

    symbolicNames = [ "<INVALID>",
            "PASSWORD", "USERNAME", "DECIMAL", "LETTERS", "MONEY", "WS" ]

    ruleNames = [ "PASSWORD", "USERNAME", "DECIMAL", "LETTERS", "MONEY", 
                  "WS" ]

    grammarFileName = "Lexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[1] = self.USERNAME_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def USERNAME_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            2,15
     


